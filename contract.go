package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
	"github.com/joho/godotenv"
	_ "github.com/mattn/go-sqlite3"

	"golang.org/x/crypto/bcrypt"
)

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT
var jwtSecret = []byte("your-secure-random-secret-key")

// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
type User struct {
	ID           int    `json:"id"`
	Login        string `json:"login"`
	Password     string `json:"password,omitempty"` // –ü–∞—Ä–æ–ª—å –∏–∑ JSON (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
	PasswordHash string `json:"-"`                  // –•—ç—à –ø–∞—Ä–æ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ JSON)
	Role         string `json:"role"`
	Surname      string `json:"surname"`
	Name         string `json:"name"`
	Patronymic   string `json:"patronymic"`
}

// –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
//type AuthResponse struct {
//	Token string `json:"token"`
//}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
type Contract struct {
	ID                            int     `json:"id"`
	Date                          string  `json:"date"`
	Number                        string  `json:"number"`
	Name                          string  `json:"name"`
	Supplier                      string  `json:"supplier"`
	Status                        string  `json:"status"`
	FilePath                      *string `json:"file_path"`
	AddAgreementPath              *string `json:"add_agreement_path"`
	DisagreementProtocolPath      *string `json:"disagreement_protocol_path"`
	LawyerEditedFilePath          *string `json:"lawyer_edited_file_path"`
	ChiefAccountantEditedFilePath *string `json:"chief_accountant_edited_file_path"`
	History                       string  `json:"history"`
	Movement                      string  `json:"movement"`
	LawyerStatus                  *string `json:"lawyer_status"`
	ChiefAccountantStatus         *string `json:"chief_accountant_status"`
	CounterpartyStatus            *string `json:"counterparty_status"`
	Curator                       string  `json:"curator"`
	SignedFilePath                *string `json:"signed_file_path"`
	IsSignedElectronically        bool    `json:"is_signed_electronically"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
type Counterparty struct {
	ID              int     `json:"id"`
	Name            string  `json:"name"`
	INN             *string `json:"inn,omitempty"`
	KPP             *string `json:"kpp,omitempty"`
	OGRN            *string `json:"ogrn,omitempty"`
	BIK             *string `json:"bik,omitempty"`
	BankName        *string `json:"bank_name,omitempty"`
	AccountNumber   *string `json:"account_number,omitempty"`
	DirectorName    *string `json:"director_name,omitempty"`
	DirectorPhone   *string `json:"director_phone,omitempty"`
	ManagerName     *string `json:"manager_name,omitempty"`
	ManagerPhone    *string `json:"manager_phone,omitempty"`
	LegalAddress    *string `json:"legal_address,omitempty"`
	PhysicalAddress *string `json:"physical_address,omitempty"`
	Comment         *string `json:"comment,omitempty"`
}

const (
	lawyerFilePrefix          = "–Æ–†–ò–°–¢"
	chiefAccountantFilePrefix = "–ì–õ–ê–í–ë–£–•"
)

// encodeRFC5987 –∫–æ–¥–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Content-Disposition —Å–æ–≥–ª–∞—Å–Ω–æ RFC 5987
func encodeRFC5987(filename string) string {
	var encoded strings.Builder
	for _, r := range filename {
		if (r >= 'A' && r <= 'Z') || (r >= 'a' && r <= 'z') || (r >= '0' && r <= '9') ||
			r == '-' || r == '_' || r == '.' || r == '~' {
			encoded.WriteRune(r)
		} else {
			bytes := []byte(string(r))
			for _, b := range bytes {
				encoded.WriteString(fmt.Sprintf("%%%02X", b))
			}
		}
	}
	return encoded.String()
}

// generateFileName –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ –Æ–†–ò–°–¢ –∏ –ì–õ–ê–í–ë–£–•
func generateFileName(baseName, suffix, timestamp, extension string) string {
	return baseName + "_" + suffix + "_" + timestamp + extension
}

// sanitizeFolderName –æ—á–∏—â–∞–µ—Ç –∏–º—è –ø–∞–ø–∫–∏ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
func sanitizeFolderName(name string) string {
	invalidChars := regexp.MustCompile(`[<>:"/\\|?*]`)
	sanitized := invalidChars.ReplaceAllString(name, "")
	sanitized = strings.TrimSpace(sanitized)
	sanitized = regexp.MustCompile(`\s+`).ReplaceAllString(sanitized, "_")
	if sanitized == "" {
		return "UnknownSupplier"
	}
	return sanitized
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –∏ —Ä–æ–ª–∏
func authMiddleware(allowedRoles ...string) gin.HandlerFunc {
	return func(c *gin.Context) {
		tokenString := c.GetHeader("Authorization")
		if tokenString == "" {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"})
			c.Abort()
			return
		}

		if strings.HasPrefix(tokenString, "Bearer ") {
			tokenString = strings.TrimPrefix(tokenString, "Bearer ")
		} else {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"})
			c.Abort()
			return
		}

		token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
			if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
				return nil, fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏: %v", token.Header["alg"])
			}
			return jwtSecret, nil
		})

		if err != nil || !token.Valid {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω"})
			c.Abort()
			return
		}

		claims, ok := token.Claims.(jwt.MapClaims)
		if !ok {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞"})
			c.Abort()
			return
		}

		role := claims["role"].(string)
		allowed := false
		for _, allowedRole := range allowedRoles {
			if role == allowedRole {
				allowed = true
				break
			}
		}
		if !allowed {
			c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"})
			c.Abort()
			return
		}

		userID, _ := claims["user_id"].(float64)
		c.Set("user_id", int(userID))
		c.Set("role", role)
		c.Next()
	}
}

func validateToken(c *gin.Context) {
	tokenString := c.GetHeader("Authorization")
	if tokenString == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"})
		return
	}
	token := strings.TrimPrefix(tokenString, "Bearer ")
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JWT)
	// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
	if token == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω"})
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞: ", err)
	}

	jwtSecret := []byte(os.Getenv("JWT_SECRET"))
	if len(jwtSecret) == 0 {
		log.Fatal("JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	gin.SetMode(gin.ReleaseMode)
	r := gin.Default()

	r.MaxMultipartMemory = 10 << 20 // 10 MB

	// –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
	r.Use(func(c *gin.Context) {
		startTime := time.Now()
		clientIP := c.ClientIP()
		method := c.Request.Method
		path := c.Request.URL.Path
		fmt.Printf("[üîå] %s - %s %s –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç %s\n", startTime.Format("2006-01-02 15:04:05"), method, path, clientIP)
		c.Next()
		statusCode := c.Writer.Status()
		endTime := time.Now()
		duration := endTime.Sub(startTime)
		fmt.Printf("[‚úÖ] %s - %s %s [%d] –æ—Ç %s (–≤—Ä–µ–º—è: %v)\n", endTime.Format("2006-01-02 15:04:05"), method, path, statusCode, clientIP, duration)
	})

	r.Use(cors.New(cors.Config{
		AllowAllOrigins:  true,
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	db, err := sql.Open("sqlite3", "./contracts.db")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ", err)
	}
	defer db.Close()

	// –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
	_, err = db.Exec("PRAGMA foreign_keys = ON;")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π: ", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS contracts (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			date TEXT,
			number TEXT,
			name TEXT NOT NULL,
			supplier TEXT NOT NULL,
			status TEXT NOT NULL,
			file_path TEXT,
			add_agreement_path TEXT,
			disagreement_protocol_path TEXT,
			lawyer_edited_file_path TEXT,
			chief_accountant_edited_file_path TEXT,
			history TEXT,
			movement TEXT,
			lawyer_status TEXT,
			chief_accountant_status TEXT,
			counterparty_status TEXT,
			curator TEXT NOT NULL,
			signed_file_path TEXT,
			is_signed_electronically BOOLEAN DEFAULT FALSE
		)
	`)
	if err != nil {
		panic("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã contracts: " + err.Error())
	}

	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS counterparties (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			name TEXT NOT NULL UNIQUE,
			inn TEXT,
			kpp TEXT,
			ogrn TEXT,
			bik TEXT,
			bank_name TEXT,
			account_number TEXT,
			director_name TEXT,
			director_phone TEXT,
			manager_name TEXT,
			manager_phone TEXT,
			legal_address TEXT,
			physical_address TEXT,
			comment TEXT
		)
	`)
	if err != nil {
		panic("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã counterparties: " + err.Error())
	}

	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS curators (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			surname TEXT NOT NULL,
			name TEXT NOT NULL,
			patronymic TEXT NOT NULL,
			user_id INTEGER,
			UNIQUE(surname, name, patronymic),
			FOREIGN KEY (user_id) REFERENCES users(id)
		)
	`)
	if err != nil {
		panic("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã curators: " + err.Error())
	}

	_, err = db.Exec(`
		CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY AUTOINCREMENT,
			login TEXT NOT NULL UNIQUE,
			password_hash TEXT NOT NULL,
			role TEXT NOT NULL CHECK(role IN ('curator', 'lawyer', 'chief_accountant', 'chief_engineer', 'admin')),
			surname TEXT NOT NULL,
			name TEXT NOT NULL,
			patronymic TEXT NOT NULL
		)
	`)
	if err != nil {
		panic("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users: " + err.Error())
	}

	// —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
	_, err = db.Exec(`CREATE INDEX IF NOT EXISTS idx_contracts_curator ON contracts(curator);`)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ idx_contracts_curator: ", err)
	}

	_, err = db.Exec(`CREATE INDEX IF NOT EXISTS idx_users_login ON users(login);`)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ idx_users_login: ", err)
	}

	_, err = db.Exec(`CREATE INDEX IF NOT EXISTS idx_counterparties_name ON counterparties(name);`)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ idx_counterparties_name: ", err)
	}

	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
	r.GET("/validate-token", validateToken)

	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ö–æ–¥–∞
	r.POST("/login", func(c *gin.Context) {
		log.Println("\n\n=== DEBUG LOGIN HANDLER ===")
		log.Printf("Request Body: %v", c.Request.Body)

		// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
		var credentials struct {
			Login    string `json:"login" binding:"required"`
			Password string `json:"password" binding:"required"`
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
		if err := c.ShouldBindJSON(&credentials); err != nil {
			log.Printf("[AUTH] Invalid request format: %v", err)
			c.JSON(http.StatusBadRequest, gin.H{
				"error":   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
				"details": err.Error(),
			})
			return
		}

		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ (–±–µ–∑ –ø–∞—Ä–æ–ª—è –≤ –ª–æ–≥–∞—Ö!)
		log.Printf("[AUTH] Login attempt for user: %s", credentials.Login)

		// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
		var user User
		err := db.QueryRow(`
			SELECT id, login, password_hash, role, surname, name, patronymic 
			FROM users 
			WHERE login = ?`,
			strings.TrimSpace(credentials.Login)).
			Scan(
				&user.ID,
				&user.Login,
				&user.PasswordHash, // –ò—Å–ø–æ–ª—å–∑—É–µ–º PasswordHash –¥–ª—è —Ö—ç—à–∞ –∏–∑ –±–∞–∑—ã
				&user.Role,
				&user.Surname,
				&user.Name,
				&user.Patronymic,
			)

		if err != nil {
			if err == sql.ErrNoRows {
				log.Printf("[AUTH] User not found: %s", credentials.Login)
				// –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
				time.Sleep(1 * time.Second)
				c.JSON(http.StatusUnauthorized, gin.H{
					"error":   "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
					"details": "user not found",
				})
				return
			}

			log.Printf("[AUTH] Database error: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{
				"error":   "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
				"details": err.Error(),
			})
			return
		}

		// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —Å —Ö–µ—à–µ–º
		err = bcrypt.CompareHashAndPassword(
			[]byte(user.PasswordHash),
			[]byte(credentials.Password),
		)
		if err != nil {
			log.Printf("[AUTH] Invalid password for user: %s", user.Login)
			// –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
			time.Sleep(1 * time.Second)
			c.JSON(http.StatusUnauthorized, gin.H{
				"error":   "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
				"details": "password mismatch",
			})
			return
		}

		// –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
		token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
			"user_id": user.ID,
			"role":    user.Role,
			"exp":     time.Now().Add(time.Hour * 24).Unix(), // 24 —á–∞—Å–∞
			"login":   user.Login,
		})

		// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
		tokenString, err := token.SignedString(jwtSecret)
		if err != nil {
			log.Printf("[AUTH] Token generation error: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{
				"error":   "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞",
				"details": err.Error(),
			})
			return
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		fullName := fmt.Sprintf("%s %s %s",
			user.Surname,
			user.Name,
			user.Patronymic)

		log.Printf("[AUTH] Successful login for: %s (%s)", user.Login, fullName)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
		c.JSON(http.StatusOK, gin.H{
			"token": tokenString,
			"role":  user.Role,
			"user": gin.H{
				"id":         user.ID,
				"login":      user.Login,
				"surname":    user.Surname,
				"name":       user.Name,
				"patronymic": user.Patronymic,
				"fullName":   fmt.Sprintf("%s %s %s", user.Surname, user.Name, user.Patronymic),
			},
		})
	})

	// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
	r.POST("/users", authMiddleware("admin"), func(c *gin.Context) {
		var newUser User
		if err := c.BindJSON(&newUser); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
			return
		}

		if newUser.Login == "" || newUser.Password == "" || newUser.Role == "" || newUser.Surname == "" || newUser.Name == "" || newUser.Patronymic == "" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
			return
		}

		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(newUser.Password), bcrypt.DefaultCost)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è"})
			return
		}

		result, err := db.Exec(
			"INSERT INTO users (login, password_hash, role, surname, name, patronymic) VALUES (?, ?, ?, ?, ?, ?)",
			newUser.Login, string(hashedPassword), newUser.Role, newUser.Surname, newUser.Name, newUser.Patronymic,
		)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error()})
			return
		}

		id, _ := result.LastInsertId()
		newUser.ID = int(id)

		if newUser.Role == "curator" {
			_, err = db.Exec(
				"INSERT INTO curators (surname, name, patronymic, user_id) VALUES (?, ?, ?, ?)",
				newUser.Surname, newUser.Name, newUser.Patronymic, newUser.ID,
			)
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
				return
			}
		}

		c.JSON(http.StatusOK, newUser)
	})

	// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤
	r.POST("/contracts", authMiddleware("curator", "admin", "chief_engineer"), func(c *gin.Context) {
		userID, _ := c.Get("user_id")
		role, _ := c.Get("role")

		var contract Contract
		contract.Date = c.PostForm("date")
		contract.Number = c.PostForm("number")
		contract.Name = c.PostForm("name")
		contract.Supplier = c.PostForm("supplier")
		contract.Movement = c.PostForm("movement")
		contract.Status = "–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"
		contract.LawyerStatus = new(string)
		*contract.LawyerStatus = "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
		contract.ChiefAccountantStatus = new(string)
		*contract.ChiefAccountantStatus = "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
		contract.CounterpartyStatus = new(string)
		*contract.CounterpartyStatus = "–û–∂–∏–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω"
		contract.History = time.Now().Format("02.01.2006 15:04") + " - –î–æ–≥–æ–≤–æ—Ä —Å–æ–∑–¥–∞–Ω"
		contract.Curator = c.PostForm("curator")

		if contract.Curator == "" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ö—É—Ä–∞—Ç–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è"})
			return
		}

		if role == "curator" {
			var userCurator string
			err := db.QueryRow(
				"SELECT surname || ' ' || name || ' ' || patronymic FROM users WHERE id = ?",
				userID,
			).Scan(&userCurator)
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
				return
			}
			if contract.Curator != userCurator {
				c.JSON(http.StatusForbidden, gin.H{"error": "–ö—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã —Ç–æ–ª—å–∫–æ —Å —Å–æ–±–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—É—Ä–∞—Ç–æ—Ä–∞"})
				return
			}
		}

		var existingID int
		err := db.QueryRow("SELECT id FROM counterparties WHERE name = ?", contract.Supplier).Scan(&existingID)
		if err == sql.ErrNoRows {
			_, err = db.Exec("INSERT INTO counterparties (name) VALUES (?)", contract.Supplier)
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞: " + err.Error()})
				return
			}
		}

		uploadFolder := "D:\\contract\\uploads"
		supplierFolderName := sanitizeFolderName(contract.Supplier)
		supplierFolderPath := filepath.Join(uploadFolder, supplierFolderName)
		if err := os.MkdirAll(supplierFolderPath, os.ModePerm); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: " + err.Error()})
			return
		}

		timestamp := time.Now().Format("20060102150405")
		var filePath *string
		file, err := c.FormFile("file")
		if err == nil && file != nil {
			extension := filepath.Ext(file.Filename)
			baseName := filepath.Base(file.Filename[:len(file.Filename)-len(extension)])
			uniqueFileName := baseName + "_" + timestamp + extension
			absolutePath := filepath.Join(supplierFolderPath, uniqueFileName)
			if err := c.SaveUploadedFile(file, absolutePath); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: " + err.Error()})
				return
			}
			filePath = &absolutePath
		}

		result, err := db.Exec(
			"INSERT INTO contracts (date, number, name, supplier, status, file_path, history, movement, lawyer_status, chief_accountant_status, counterparty_status, curator) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
			contract.Date, contract.Number, contract.Name, contract.Supplier, contract.Status, filePath, contract.History, contract.Movement, contract.LawyerStatus, contract.ChiefAccountantStatus, contract.CounterpartyStatus, contract.Curator,
		)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞: " + err.Error()})
			return
		}
		id, _ := result.LastInsertId()
		contract.ID = int(id)
		c.JSON(http.StatusOK, contract)
	})

	r.PUT("/contracts/:id", authMiddleware("curator", "lawyer", "chief_accountant", "chief_engineer", "admin"), func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}

		userID, _ := c.Get("user_id")
		role, _ := c.Get("role")

		var current Contract
		err = db.QueryRow(
			"SELECT date, number, name, supplier, status, file_path, add_agreement_path, disagreement_protocol_path, lawyer_edited_file_path, chief_accountant_edited_file_path, history, movement, lawyer_status, chief_accountant_status, counterparty_status, curator, signed_file_path, is_signed_electronically FROM contracts WHERE id = ?",
			id,
		).Scan(&current.Date, &current.Number, &current.Name, &current.Supplier, &current.Status, &current.FilePath, &current.AddAgreementPath, &current.DisagreementProtocolPath, &current.LawyerEditedFilePath, &current.ChiefAccountantEditedFilePath, &current.History, &current.Movement, &current.LawyerStatus, &current.ChiefAccountantStatus, &current.CounterpartyStatus, &current.Curator, &current.SignedFilePath, &current.IsSignedElectronically)
		if err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "–î–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: " + err.Error()})
			return
		}

		if role == "curator" {
			var userCurator string
			err := db.QueryRow(
				"SELECT surname || ' ' || name || ' ' || patronymic FROM users WHERE id = ?",
				userID,
			).Scan(&userCurator)
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
				return
			}
			if current.Curator != userCurator {
				c.JSON(http.StatusForbidden, gin.H{"error": "–ö—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–æ–≥–æ–≤–æ—Ä—ã"})
				return
			}
		}

		var filePath, addAgreementPath, disagreementProtocolPath, lawyerEditedFilePath, chiefAccountantEditedFilePath, signedFilePath *string
		timestamp := time.Now().Format("20060102150405")

		date := c.Request.FormValue("date")
		number := c.Request.FormValue("number")
		name := c.Request.FormValue("name")
		supplier := c.Request.FormValue("supplier")
		status := c.Request.FormValue("status")
		movement := c.Request.FormValue("movement")
		uploadFolder := c.Request.FormValue("uploadFolder")
		lawyerStatus := c.Request.FormValue("lawyer_status")
		chiefAccountantStatus := c.Request.FormValue("chief_accountant_status")
		counterpartyStatus := c.Request.FormValue("counterparty_status")
		curator := c.Request.FormValue("curator")
		signedFile, _ := c.FormFile("signed_file")
		isSignedElectronically := c.Request.FormValue("is_signed_electronically") == "true"

		if role == "curator" && curator != current.Curator {
			c.JSON(http.StatusForbidden, gin.H{"error": "–ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞"})
			return
		}

		if role == "lawyer" {
			if lawyerStatus == "" || lawyerStatus == *current.LawyerStatus {
				lawyerStatus = *current.LawyerStatus
			} else if lawyerStatus != "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏" && lawyerStatus != "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç" && lawyerStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" && lawyerStatus != "–í–Ω–µ—Å –ø—Ä–∞–≤–∫–∏" && lawyerStatus != "–ü—Ä–æ—Ç–æ–∫–æ–ª —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π" {
				c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å —é—Ä–∏—Å—Ç–∞"})
				return
			}
			date = current.Date
			number = current.Number
			name = current.Name
			supplier = current.Supplier
			status = current.Status
			movement = current.Movement
			chiefAccountantStatus = *current.ChiefAccountantStatus
			counterpartyStatus = *current.CounterpartyStatus
			curator = current.Curator
			isSignedElectronically = current.IsSignedElectronically
		}

		if role == "chief_accountant" {
			if chiefAccountantStatus == "" || chiefAccountantStatus == *current.ChiefAccountantStatus {
				chiefAccountantStatus = *current.ChiefAccountantStatus
			} else if chiefAccountantStatus != "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏" && chiefAccountantStatus != "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç" && chiefAccountantStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" && chiefAccountantStatus != "–í–Ω–µ—Å –ø—Ä–∞–≤–∫–∏" {
				c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –≥–ª–∞–≤–±—É—Ö–∞"})
				return
			}
			date = current.Date
			number = current.Number
			name = current.Name
			supplier = current.Supplier
			status = current.Status
			movement = current.Movement
			lawyerStatus = *current.LawyerStatus
			counterpartyStatus = *current.CounterpartyStatus
			curator = current.Curator
			isSignedElectronically = current.IsSignedElectronically
		}

		if role == "chief_engineer" {
			date = current.Date
			number = current.Number
			name = current.Name
			supplier = current.Supplier
			status = current.Status
			lawyerStatus = *current.LawyerStatus
			chiefAccountantStatus = *current.ChiefAccountantStatus
			counterpartyStatus = *current.CounterpartyStatus
			curator = current.Curator
			isSignedElectronically = current.IsSignedElectronically
		}

		supplierFolderName := sanitizeFolderName(supplier)
		supplierFolderPath := filepath.Join(uploadFolder, supplierFolderName)
		if uploadFolder == "" {
			uploadFolder = "D:\\contract\\Uploads"
		}

		if err := os.MkdirAll(supplierFolderPath, os.ModePerm); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: " + err.Error()})
			return
		}

		file, _ := c.FormFile("file")
		addAgreement, _ := c.FormFile("add_agreement")
		disagreementProtocol, _ := c.FormFile("disagreement_protocol")
		lawyerEditedFile, _ := c.FormFile("lawyer_edited_file")
		chiefAccountantEditedFile, _ := c.FormFile("chief_accountant_edited_file")

		if file != nil && (role == "curator" || role == "admin") {
			extension := filepath.Ext(file.Filename)
			baseName := filepath.Base(file.Filename[:len(file.Filename)-len(extension)])
			uniqueFileName := baseName + "_" + timestamp + extension
			absolutePath := filepath.Join(supplierFolderPath, uniqueFileName)
			if err := c.SaveUploadedFile(file, absolutePath); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: " + err.Error()})
				return
			}
			filePath = &absolutePath
		}

		if addAgreement != nil && (role == "curator" || role == "chief_engineer" || role == "admin") {
			extension := filepath.Ext(addAgreement.Filename)
			baseName := filepath.Base(addAgreement.Filename[:len(addAgreement.Filename)-len(extension)])
			uniqueFileName := baseName + "_" + timestamp + extension
			absolutePath := filepath.Join(supplierFolderPath, uniqueFileName)
			if err := c.SaveUploadedFile(addAgreement, absolutePath); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø. —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: " + err.Error()})
				return
			}
			addAgreementPath = &absolutePath
		}

		if disagreementProtocol != nil && (role == "curator" || role == "lawyer" || role == "admin") {
			extension := filepath.Ext(disagreementProtocol.Filename)
			baseName := filepath.Base(disagreementProtocol.Filename[:len(disagreementProtocol.Filename)-len(extension)])
			uniqueFileName := baseName + "_" + timestamp + extension
			absolutePath := filepath.Join(supplierFolderPath, uniqueFileName)
			if err := c.SaveUploadedFile(disagreementProtocol, absolutePath); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π: " + err.Error()})
				return
			}
			disagreementProtocolPath = &absolutePath
		}

		if lawyerEditedFile != nil && (role == "lawyer" || role == "admin") {
			extension := filepath.Ext(lawyerEditedFile.Filename)
			baseName := filepath.Base(lawyerEditedFile.Filename[:len(lawyerEditedFile.Filename)-len(extension)])
			uniqueFileName := generateFileName(baseName, lawyerFilePrefix, timestamp, extension)
			absolutePath := filepath.Join(supplierFolderPath, uniqueFileName)
			if err := c.SaveUploadedFile(lawyerEditedFile, absolutePath); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∫–∞–º–∏ —é—Ä–∏—Å—Ç–∞: " + err.Error()})
				return
			}
			lawyerEditedFilePath = &absolutePath
		}

		if chiefAccountantEditedFile != nil && (role == "chief_accountant" || role == "admin") {
			extension := filepath.Ext(chiefAccountantEditedFile.Filename)
			baseName := filepath.Base(chiefAccountantEditedFile.Filename[:len(chiefAccountantEditedFile.Filename)-len(extension)])
			uniqueFileName := generateFileName(baseName, chiefAccountantFilePrefix, timestamp, extension)
			absolutePath := filepath.Join(supplierFolderPath, uniqueFileName)
			if err := c.SaveUploadedFile(chiefAccountantEditedFile, absolutePath); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∫–∞–º–∏ –≥–ª–∞–≤–±—É—Ö–∞: " + err.Error()})
				return
			}
			chiefAccountantEditedFilePath = &absolutePath
		}

		if signedFile != nil && (role == "curator" || role == "admin") {
			extension := filepath.Ext(signedFile.Filename)
			baseName := filepath.Base(signedFile.Filename[:len(signedFile.Filename)-len(extension)])
			uniqueFileName := baseName + "_signed_" + timestamp + extension
			absolutePath := filepath.Join(supplierFolderPath, uniqueFileName)
			if err := c.SaveUploadedFile(signedFile, absolutePath); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: " + err.Error()})
				return
			}
			signedFilePath = &absolutePath
		}

		contract := Contract{
			ID:                            id,
			Date:                          date,
			Number:                        number,
			Name:                          name,
			Supplier:                      supplier,
			Status:                        status,
			FilePath:                      filePath,
			AddAgreementPath:              addAgreementPath,
			DisagreementProtocolPath:      disagreementProtocolPath,
			LawyerEditedFilePath:          lawyerEditedFilePath,
			ChiefAccountantEditedFilePath: chiefAccountantEditedFilePath,
			History:                       current.History,
			Movement:                      movement,
			LawyerStatus:                  &lawyerStatus,
			ChiefAccountantStatus:         &chiefAccountantStatus,
			CounterpartyStatus:            &counterpartyStatus,
			Curator:                       curator,
			SignedFilePath:                signedFilePath,
			IsSignedElectronically:        isSignedElectronically,
		}

		if contract.Date == "" {
			contract.Date = current.Date
		}
		if contract.Number == "" {
			contract.Number = current.Number
		}
		if contract.Name == "" {
			contract.Name = current.Name
		}
		if contract.Supplier == "" {
			contract.Supplier = current.Supplier
		}
		if contract.Status == "" {
			contract.Status = current.Status
		}
		if contract.FilePath == nil {
			contract.FilePath = current.FilePath
		}
		if contract.AddAgreementPath == nil {
			contract.AddAgreementPath = current.AddAgreementPath
		}
		if contract.DisagreementProtocolPath == nil {
			contract.DisagreementProtocolPath = current.DisagreementProtocolPath
		}
		if contract.LawyerEditedFilePath == nil {
			contract.LawyerEditedFilePath = current.LawyerEditedFilePath
		}
		if contract.ChiefAccountantEditedFilePath == nil {
			contract.ChiefAccountantEditedFilePath = current.ChiefAccountantEditedFilePath
		}
		if contract.Movement == "" {
			contract.Movement = current.Movement
		}
		if contract.Curator == "" {
			contract.Curator = current.Curator
		}
		if contract.SignedFilePath == nil {
			contract.SignedFilePath = current.SignedFilePath
		}

		if contract.Status == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º" && *contract.CounterpartyStatus != "–®–∞–±–ª–æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–°—Ç–∞—Ç—É—Å –¥–æ–≥–æ–≤–æ—Ä–∞ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º' –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º."})
			return
		}

		if contract.Status == "–°ACACAC—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏" {
			if *contract.CounterpartyStatus != "–®–∞–±–ª–æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" {
				c.JSON(http.StatusBadRequest, gin.H{"error": "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º."})
				return
			}
			if *contract.LawyerStatus == "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏" && *contract.ChiefAccountantStatus == "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏" {
				c.JSON(http.StatusBadRequest, gin.H{"error": "–î–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—é—Ä–∏—Å—Ç –∏–ª–∏ –≥–ª–∞–≤–±—É—Ö) –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É."})
				return
			}
		}

		if contract.Status == "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º" {
			if *contract.LawyerStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" || *contract.ChiefAccountantStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" {
				c.JSON(http.StatusBadRequest, gin.H{"error": "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —é—Ä–∏—Å—Ç–∞ –∏ –≥–ª–∞–≤–±—É—Ö–∞."})
				return
			}
			if *contract.CounterpartyStatus == "–û–∂–∏–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω" || *contract.CounterpartyStatus == "–®–∞–±–ª–æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" {
				c.JSON(http.StatusBadRequest, gin.H{"error": "–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –¥–æ–≥–æ–≤–æ—Ä –ø–µ—Ä–µ–¥–∞–Ω –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É, –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É."})
				return
			}
		}

		if contract.Status == "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ" {
			if *contract.LawyerStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" || *contract.ChiefAccountantStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" || *contract.CounterpartyStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" {
				c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Å–µ–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏."})
				return
			}
		}

		if contract.Status == "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ" || contract.Status == "–ó–∞–≤–µ—Ä—à–µ–Ω" {
			if *contract.LawyerStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" || *contract.ChiefAccountantStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" || *contract.CounterpartyStatus != "–°–æ–≥–ª–∞—Å–æ–≤–∞–ª" {
				c.JSON(http.StatusBadRequest, gin.H{"error": "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Å–µ–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏."})
				return
			}
		}

		if contract.Status == "–ó–∞–≤–µ—Ä—à–µ–Ω" {
			if !contract.IsSignedElectronically && contract.SignedFilePath == nil {
				c.JSON(http.StatusBadRequest, gin.H{"error": "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏–±–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫–∞–Ω –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ª–∏–±–æ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≠–î–û"})
				return
			}
		}

		if contract.Status != current.Status && contract.Status != "" {
			newEntry := time.Now().Format("02.01.2006 15:04") + " - –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '" + contract.Status + "'"
			if contract.History == "" {
				contract.History = newEntry
			} else {
				contract.History = newEntry + "\n" + contract.History
			}
		}

		_, err = db.Exec(
			"UPDATE contracts SET date = ?, number = ?, name = ?, supplier = ?, status = ?, file_path = ?, add_agreement_path = ?, disagreement_protocol_path = ?, lawyer_edited_file_path = ?, chief_accountant_edited_file_path = ?, history = ?, movement = ?, lawyer_status = ?, chief_accountant_status = ?, counterparty_status = ?, curator = ?, signed_file_path = ?, is_signed_electronically = ? WHERE id = ?",
			contract.Date, contract.Number, contract.Name, contract.Supplier, contract.Status, contract.FilePath, contract.AddAgreementPath, contract.DisagreementProtocolPath, contract.LawyerEditedFilePath, contract.ChiefAccountantEditedFilePath, contract.History, contract.Movement, contract.LawyerStatus, contract.ChiefAccountantStatus, contract.CounterpartyStatus, contract.Curator, contract.SignedFilePath, contract.IsSignedElectronically, id,
		)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞: " + err.Error()})
			return
		}
		c.JSON(http.StatusOK, contract)
	})

	// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º middleware
	r.GET("/contracts", authMiddleware("curator", "lawyer", "chief_accountant", "chief_engineer", "admin"), func(c *gin.Context) {
		userID, _ := c.Get("user_id")
		role, _ := c.Get("role")

		query := "SELECT id, date, number, name, supplier, status, file_path, add_agreement_path, disagreement_protocol_path, lawyer_edited_file_path, chief_accountant_edited_file_path, history, movement, lawyer_status, chief_accountant_status, counterparty_status, curator, signed_file_path, is_signed_electronically FROM contracts"
		var rows *sql.Rows
		var err error

		if role == "curator" {
			var userCurator string
			err = db.QueryRow(
				"SELECT surname || ' ' || name || ' ' || patronymic FROM curators WHERE user_id = ?",
				userID,
			).Scan(&userCurator)
			if err == sql.ErrNoRows {
				log.Printf("[DEBUG] –ö—É—Ä–∞—Ç–æ—Ä —Å user_id %d –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ curators", userID)
				c.JSON(http.StatusOK, []Contract{})
				return
			}
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è user_id %d: %v", userID, err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
				return
			}
			log.Printf("[DEBUG] –ö—É—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: %s", userCurator)
			query += " WHERE curator = ?"
			rows, err = db.Query(query, userCurator)
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞ %s: %v", userCurator, err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
				return
			}
		} else {
			log.Printf("[DEBUG] –ó–∞–ø—Ä–æ—Å –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è —Ä–æ–ª–∏ %s –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫—É—Ä–∞—Ç–æ—Ä—É", role)
			rows, err = db.Query(query)
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–æ–ª–∏ %s: %v", role, err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
				return
			}
		}

		defer rows.Close()

		var contracts []Contract
		for rows.Next() {
			var contract Contract
			err := rows.Scan(
				&contract.ID,
				&contract.Date,
				&contract.Number,
				&contract.Name,
				&contract.Supplier,
				&contract.Status,
				&contract.FilePath,
				&contract.AddAgreementPath,
				&contract.DisagreementProtocolPath,
				&contract.LawyerEditedFilePath,
				&contract.ChiefAccountantEditedFilePath,
				&contract.History,
				&contract.Movement,
				&contract.LawyerStatus,
				&contract.ChiefAccountantStatus,
				&contract.CounterpartyStatus,
				&contract.Curator,
				&contract.SignedFilePath,
				&contract.IsSignedElectronically,
			)
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–∞: %v", err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
				return
			}
			contracts = append(contracts, contract)
		}

		log.Printf("[DEBUG] –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ %d –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è —Ä–æ–ª–∏ %s", len(contracts), role)
		c.JSON(http.StatusOK, contracts)
	})

	r.GET("/counterparties", authMiddleware("curator", "lawyer", "chief_accountant", "chief_engineer", "admin"), func(c *gin.Context) {
		rows, err := db.Query("SELECT id, name FROM counterparties")
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
			return
		}
		defer rows.Close()

		var counterparties []Counterparty
		for rows.Next() {
			var cp Counterparty
			err := rows.Scan(&cp.ID, &cp.Name)
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
				return
			}
			counterparties = append(counterparties, cp)
		}
		c.JSON(http.StatusOK, counterparties)
	})

	r.PUT("/counterparties/:id", authMiddleware("curator", "admin", "chief_engineer"), func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}

		var counterparty Counterparty
		if err := c.BindJSON(&counterparty); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
			return
		}

		var existingID int
		err = db.QueryRow("SELECT id FROM counterparties WHERE id = ?", id).Scan(&existingID)
		if err == sql.ErrNoRows {
			c.JSON(http.StatusNotFound, gin.H{"error": "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		} else if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞: " + err.Error()})
			return
		}

		_, err = db.Exec(`
			UPDATE counterparties SET 
				name = ?, inn = ?, kpp = ?, ogrn = ?, bik = ?, bank_name = ?, account_number = ?, 
				director_name = ?, director_phone = ?, manager_name = ?, manager_phone = ?, 
				legal_address = ?, physical_address = ?, comment = ?
			WHERE id = ?`,
			counterparty.Name, counterparty.INN, counterparty.KPP, counterparty.OGRN, counterparty.BIK,
			counterparty.BankName, counterparty.AccountNumber, counterparty.DirectorName,
			counterparty.DirectorPhone, counterparty.ManagerName, counterparty.ManagerPhone,
			counterparty.LegalAddress, counterparty.PhysicalAddress, counterparty.Comment, id,
		)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞: " + err.Error()})
			return
		}
		c.JSON(http.StatusOK, counterparty)
	})

	r.GET("/counterparties/:id", authMiddleware("curator", "lawyer", "chief_accountant", "chief_engineer", "admin"), func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}

		var counterparty Counterparty
		err = db.QueryRow(`
			SELECT id, name, inn, kpp, ogrn, bik, bank_name, account_number, 
				director_name, director_phone, manager_name, manager_phone, 
				legal_address, physical_address, comment
			FROM counterparties
			WHERE id = ?
		`, id).Scan(
			&counterparty.ID, &counterparty.Name, &counterparty.INN, &counterparty.KPP, &counterparty.OGRN,
			&counterparty.BIK, &counterparty.BankName, &counterparty.AccountNumber,
			&counterparty.DirectorName, &counterparty.DirectorPhone, &counterparty.ManagerName,
			&counterparty.ManagerPhone, &counterparty.LegalAddress, &counterparty.PhysicalAddress,
			&counterparty.Comment,
		)
		if err != nil {
			if err == sql.ErrNoRows {
				c.JSON(http.StatusNotFound, gin.H{"error": "–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			} else {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
			}
			return
		}
		c.JSON(http.StatusOK, counterparty)
	})

	r.DELETE("/contracts/:id", authMiddleware("admin"), func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}

		result, err := db.Exec("DELETE FROM contracts WHERE id = ?", id)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞: " + err.Error()})
			return
		}

		rowsAffected, _ := result.RowsAffected()
		if rowsAffected == 0 {
			c.JSON(http.StatusNotFound, gin.H{"error": "–î–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		}
		c.Status(http.StatusOK)
	})

	r.PUT("/contracts/:id/clear-history", authMiddleware("admin"), func(c *gin.Context) {
		id := c.Param("id")
		stmt, err := db.Prepare("UPDATE contracts SET history = '' WHERE id = ?")
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: " + err.Error()})
			return
		}
		defer stmt.Close()

		result, err := stmt.Exec(id)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: " + err.Error()})
			return
		}

		rowsAffected, err := result.RowsAffected()
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: " + err.Error()})
			return
		}
		if rowsAffected == 0 {
			c.JSON(http.StatusNotFound, gin.H{"error": "–î–æ–≥–æ–≤–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		}
		c.JSON(http.StatusOK, gin.H{"message": "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞"})
	})

	r.GET("/download/:id/:filetype", authMiddleware("curator", "lawyer", "chief_accountant", "chief_engineer", "admin"), func(c *gin.Context) {
		idStr := c.Param("id")
		fileType := c.Param("filetype")
		userID, _ := c.Get("user_id")
		role, _ := c.Get("role")

		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}

		var contractCurator string
		err = db.QueryRow("SELECT curator FROM contracts WHERE id = ?", id).Scan(&contractCurator)
		if err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "–î–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		}

		if role == "curator" {
			var userCurator string
			err = db.QueryRow(
				"SELECT surname || ' ' || name || ' ' || patronymic FROM users WHERE id = ?",
				userID,
			).Scan(&userCurator)
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
				return
			}
			if contractCurator != userCurator {
				c.JSON(http.StatusForbidden, gin.H{"error": "–ö—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤"})
				return
			}
		}

		var filePath *string
		var columnName string
		switch fileType {
		case "file", "add_agreement", "disagreement_protocol", "signed_file":
			if role != "curator" && role != "admin" && !(role == "lawyer" && fileType == "disagreement_protocol") {
				c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞"})
				return
			}
			columnName = fileType + "_path"
		case "lawyer_edited":
			if role != "lawyer" && role != "admin" {
				c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ —é—Ä–∏—Å—Ç –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª"})
				return
			}
			columnName = "lawyer_edited_file_path"
		case "chief_accountant_edited":
			if role != "chief_accountant" && role != "admin" {
				c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–±—É—Ö –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª"})
				return
			}
			columnName = "chief_accountant_edited_file_path"
		default:
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"})
			return
		}

		err = db.QueryRow(
			fmt.Sprintf("SELECT %s FROM contracts WHERE id = ?", columnName),
			id,
		).Scan(&filePath)
		if err != nil || filePath == nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		}

		if _, err := os.Stat(*filePath); os.IsNotExist(err) {
			c.JSON(http.StatusNotFound, gin.H{"error": "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"})
			return
		}

		fileName := filepath.Base(*filePath)
		encodedFileName := encodeRFC5987(fileName)
		c.Header("Content-Disposition", fmt.Sprintf("attachment; filename*=UTF-8''%s", encodedFileName))
		c.Header("Content-Type", "application/octet-stream")
		c.File(*filePath)
	})

	r.DELETE("/delete-file/:id/:filetype", authMiddleware("curator", "lawyer", "chief_accountant", "admin"), func(c *gin.Context) {
		idStr := c.Param("id")
		fileType := c.Param("filetype")
		userID, _ := c.Get("user_id")
		role, _ := c.Get("role")

		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}

		var contractCurator string
		err = db.QueryRow("SELECT curator FROM contracts WHERE id = ?", id).Scan(&contractCurator)
		if err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "–î–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		}

		if role == "curator" {
			var userCurator string
			err = db.QueryRow(
				"SELECT surname || ' ' || name || ' ' || patronymic FROM users WHERE id = ?",
				userID,
			).Scan(&userCurator)
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
				return
			}
			if contractCurator != userCurator {
				c.JSON(http.StatusForbidden, gin.H{"error": "–ö—É—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤"})
				return
			}
		}

		var columnName string
		switch fileType {
		case "file", "add_agreement", "signed_file":
			if role != "curator" && role != "admin" {
				c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª"})
				return
			}
			columnName = fileType + "_path"
		case "disagreement_protocol":
			if role != "curator" && role != "lawyer" && role != "admin" {
				c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ –∫—É—Ä–∞—Ç–æ—Ä, —é—Ä–∏—Å—Ç –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª"})
				return
			}
			columnName = "disagreement_protocol_path"
		case "lawyer_edited":
			if role != "lawyer" && role != "admin" {
				c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ —é—Ä–∏—Å—Ç –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª"})
				return
			}
			columnName = "lawyer_edited_file_path"
		case "chief_accountant_edited":
			if role != "chief_accountant" && role != "admin" {
				c.JSON(http.StatusForbidden, gin.H{"error": "–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–±—É—Ö –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª"})
				return
			}
			columnName = "chief_accountant_edited_file_path"
		default:
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"})
			return
		}

		var filePath *string
		err = db.QueryRow(
			fmt.Sprintf("SELECT %s FROM contracts WHERE id = ?", columnName),
			id,
		).Scan(&filePath)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
			return
		}
		if filePath == nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"})
			return
		}

		normalizedPath := filepath.Clean(*filePath)
		if _, err := os.Stat(normalizedPath); !os.IsNotExist(err) {
			if err := os.Remove(normalizedPath); err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞: " + err.Error()})
				return
			}
		}

		_, err = db.Exec(
			fmt.Sprintf("UPDATE contracts SET %s = NULL WHERE id = ?", columnName),
			id,
		)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
			return
		}
		c.JSON(http.StatusOK, gin.H{"message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"})
	})

	r.GET("/curators", authMiddleware("curator", "admin", "chief_engineer"), func(c *gin.Context) {
		rows, err := db.Query("SELECT id, surname, name, patronymic FROM curators")
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
			return
		}
		defer rows.Close()

		var curators []struct {
			ID         int    `json:"id"`
			Surname    string `json:"surname"`
			Name       string `json:"name"`
			Patronymic string `json:"patronymic"`
		}
		for rows.Next() {
			var curator struct {
				ID         int    `json:"id"`
				Surname    string `json:"surname"`
				Name       string `json:"name"`
				Patronymic string `json:"patronymic"`
			}
			err := rows.Scan(&curator.ID, &curator.Surname, &curator.Name, &curator.Patronymic)
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
				return
			}
			curators = append(curators, curator)
		}
		c.JSON(http.StatusOK, curators)
	})

	r.POST("/curators", authMiddleware("admin"), func(c *gin.Context) {
		var curator struct {
			Surname    string `json:"surname"`
			Name       string `json:"name"`
			Patronymic string `json:"patronymic"`
			UserID     int    `json:"user_id"`
		}
		if err := c.BindJSON(&curator); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
			return
		}
		if curator.Surname == "" || curator.Name == "" || curator.Patronymic == "" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–í—Å–µ –ø–æ–ª—è (—Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
			return
		}

		var userRole string
		err := db.QueryRow("SELECT role FROM users WHERE id = ?", curator.UserID).Scan(&userRole)
		if err != nil || userRole != "curator" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º"})
			return
		}

		result, err := db.Exec("INSERT INTO curators (surname, name, patronymic, user_id) VALUES (?, ?, ?, ?)", curator.Surname, curator.Name, curator.Patronymic, curator.UserID)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
			return
		}
		id, _ := result.LastInsertId()
		c.JSON(http.StatusOK, gin.H{"id": id, "surname": curator.Surname, "name": curator.Name, "patronymic": curator.Patronymic})
	})

	r.DELETE("/curators/:id", authMiddleware("admin"), func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}
		var contractCount int
		err = db.QueryRow("SELECT COUNT(*) FROM contracts WHERE curator = (SELECT surname || ' ' || name || ' ' || patronymic FROM curators WHERE id = ?)", id).Scan(&contractCount)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: " + err.Error()})
			return
		}
		if contractCount > 0 {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã"})
			return
		}
		result, err := db.Exec("DELETE FROM curators WHERE id = ?", id)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
			return
		}
		rowsAffected, _ := result.RowsAffected()
		if rowsAffected == 0 {
			c.JSON(http.StatusNotFound, gin.H{"error": "–ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		}
		c.Status(http.StatusOK)
	})

	r.POST("/users/check-login", authMiddleware("admin"), func(c *gin.Context) {
		var input struct {
			Login string `json:"login"`
		}
		if err := c.BindJSON(&input); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
			return
		}

		var count int
		err := db.QueryRow("SELECT COUNT(*) FROM users WHERE login = ?", input.Login).Scan(&count)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞: " + err.Error()})
			return
		}

		if count > 0 {
			c.JSON(http.StatusConflict, gin.H{"error": "–õ–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
			return
		}

		c.JSON(http.StatusOK, gin.H{"message": "–õ–æ–≥–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω"})
	})

	// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	r.GET("/users", authMiddleware("admin"), func(c *gin.Context) {
		rows, err := db.Query(`
			SELECT id, login, role, surname, name, patronymic
			FROM users
		`)
		if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
			return
		}
		defer rows.Close()

		var users []User
		for rows.Next() {
			var user User
			err := rows.Scan(&user.ID, &user.Login, &user.Role, &user.Surname, &user.Name, &user.Patronymic)
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
				return
			}
			users = append(users, user)
		}

		log.Printf("[DEBUG] –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(users))
		c.JSON(http.StatusOK, users)
	})

	// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
	r.GET("/users/:id", authMiddleware("admin"), func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}

		var user User
		err = db.QueryRow(`
			SELECT id, login, role, surname, name, patronymic
			FROM users
			WHERE id = ?
		`, id).Scan(&user.ID, &user.Login, &user.Role, &user.Surname, &user.Name, &user.Patronymic)
		if err != nil {
			if err == sql.ErrNoRows {
				c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			} else {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", id, err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
			}
			return
		}

		c.JSON(http.StatusOK, user)
	})

	// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	r.PUT("/users/:id", authMiddleware("admin"), func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}

		var updatedUser User
		if err := c.BindJSON(&updatedUser); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: " + err.Error()})
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
		if updatedUser.Login == "" || updatedUser.Role == "" || updatedUser.Surname == "" || updatedUser.Name == "" || updatedUser.Patronymic == "" {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–í—Å–µ –ø–æ–ª—è (–ª–æ–≥–∏–Ω, —Ä–æ–ª—å, —Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ) –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var existingID int
		err = db.QueryRow("SELECT id FROM users WHERE id = ?", id).Scan(&existingID)
		if err == sql.ErrNoRows {
			c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		} else if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", id, err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error()})
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞ (–µ—Å–ª–∏ –ª–æ–≥–∏–Ω –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
		var loginCount int
		err = db.QueryRow("SELECT COUNT(*) FROM users WHERE login = ? AND id != ?", updatedUser.Login, id).Scan(&loginCount)
		if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞: %v", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞: " + err.Error()})
			return
		}
		if loginCount > 0 {
			c.JSON(http.StatusConflict, gin.H{"error": "–õ–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"})
			return
		}

		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		query := "UPDATE users SET login = ?, role = ?, surname = ?, name = ?, patronymic = ?"
		args := []interface{}{updatedUser.Login, updatedUser.Role, updatedUser.Surname, updatedUser.Name, updatedUser.Patronymic}

		// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, —Ö—ç—à–∏—Ä—É–µ–º –µ–≥–æ
		if updatedUser.Password != "" {
			hashedPassword, err := bcrypt.GenerateFromPassword([]byte(updatedUser.Password), bcrypt.DefaultCost)
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: %v", err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è"})
				return
			}
			query += ", password_hash = ?"
			args = append(args, string(hashedPassword))
		}

		query += " WHERE id = ?"
		args = append(args, id)

		_, err = db.Exec(query, args...)
		if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", id, err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error()})
			return
		}

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∫—É—Ä–∞—Ç–æ—Ä, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É curators
		if updatedUser.Role == "curator" {
			var curatorCount int
			err = db.QueryRow("SELECT COUNT(*) FROM curators WHERE user_id = ?", id).Scan(&curatorCount)
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", id, err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
				return
			}
			if curatorCount > 0 {
				_, err = db.Exec(
					"UPDATE curators SET surname = ?, name = ?, patronymic = ? WHERE user_id = ?",
					updatedUser.Surname, updatedUser.Name, updatedUser.Patronymic, id,
				)
			} else {
				_, err = db.Exec(
					"INSERT INTO curators (surname, name, patronymic, user_id) VALUES (?, ?, ?, ?)",
					updatedUser.Surname, updatedUser.Name, updatedUser.Patronymic, id,
				)
			}
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", id, err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
				return
			}
		} else {
			// –ï—Å–ª–∏ —Ä–æ–ª—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ –Ω–µ-–∫—É—Ä–∞—Ç–æ—Ä, —É–¥–∞–ª—è–µ–º –∏–∑ curators
			_, err = db.Exec("DELETE FROM curators WHERE user_id = ?", id)
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", id, err)
				c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
				return
			}
		}

		log.Printf("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID %d —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", id)
		c.JSON(http.StatusOK, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"})
	})

	// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	r.DELETE("/users/:id", authMiddleware("admin"), func(c *gin.Context) {
		idStr := c.Param("id")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"})
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã (–¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤)
		var contractCount int
		err = db.QueryRow(`
			SELECT COUNT(*) 
			FROM contracts 
			WHERE curator = (SELECT surname || ' ' || name || ' ' || patronymic FROM users WHERE id = ?)
		`, id).Scan(&contractCount)
		if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", id, err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: " + err.Error()})
			return
		}
		if contractCount > 0 {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã"})
			return
		}

		// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		result, err := db.Exec("DELETE FROM users WHERE id = ?", id)
		if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", id, err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.Error()})
			return
		}

		rowsAffected, _ := result.RowsAffected()
		if rowsAffected == 0 {
			c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
			return
		}

		// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ curators, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∫—É—Ä–∞—Ç–æ—Ä–æ–º
		_, err = db.Exec("DELETE FROM curators WHERE user_id = ?", id)
		if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID %d: %v", id, err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–∞: " + err.Error()})
			return
		}

		log.Printf("[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID %d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", id)
		c.JSON(http.StatusOK, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"})
	})

	os.MkdirAll("D:\\contract\\Uploads", os.ModePerm)
	r.Static("/static", "./static")
	r.GET("/", func(c *gin.Context) {
		c.File("./static/contract.html")
	})

	const (
		green = "\033[32m"
		red   = "\033[31m"
		reset = "\033[0m"
	)

	fmt.Println(green + "üöÄ Backend —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080" + reset)
	if err := r.Run("0.0.0.0:8080"); err != nil {
		fmt.Println(red + "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + err.Error() + reset)
	}
}

func isColumnExistsError(err error) bool {
	return strings.Contains(err.Error(), "duplicate column name")
}
